Register Allocation
-------------------

The virtual CPU has a limited number of registers.  The limit is primarily to keep the size of the bytecode
small.  (Of course, since this is a RISC machine, bytecode is kind of a misnomer.  Each instruction is
32-bits wide.)

Since we use SSA as the intermediate form (for optimization purposes), it makes sense to have a decent
register allocator to map the infinite SSA registers into the much more limited vcpu registers.

Consider the following code:

Python:

a = (5+10-22)*10
b = a + (100-50)
c = (a + b) * 200
d = b + (c *25)

SSA:

tmp.1  = 5 
tmp.2  = 10
tmp.3  = tmp.1 + tmp.2
tmp.4  = 22
tmp.5  = tmp.3 - tmp.4
tmp.6  = 10
a.1    = tmp.5 * tmp.6
tmp.7  = 100
tmp.8  = 50
tmp.9  = tmp.7 - tmp.8
b.1    = a.1 + tmp.9
tmp.10 = a.1 + b.1
tmp.11 = 200
c.1    = tmp.10 * tmp.11
tmp.12 = 25
tmp.13 = c.1 * tmp.12
d.1    = b.1 + tmp.13

---
                          0 1 2 3 4 5 6 7
        1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 
tmp.1  |*---* 
tmp.2  |  *-*
tmp.3  |    *---*
tmp.4  |      *-*
tmp.5  |        *--*
tmp.6  |         *-*
tmp.7  |              *---* 
tmp.8  |                *-*
tmp.9  |                  *-*    
tmp.10 |                    *-----*
tmp.11 |                        *-*
tmp.12 |                            *-*
tmp.13 |                              *-*
a.1    |             *---------*
b.1    |                    *-----------*
c.1    |                           *--*
d.1    |                                *


---

In this case we have two long lived variables, whereas the rest have very short active lifetimes.  The allocator
will tend to favor soonest needed rather than longest lived.  Whoever has the farthest active end will be spilled.

---

SSA rewrite for dead code elimination

tmp.1 = 5
tmp.2 = 10
tmp.3 = tmp.1 + tmp.2
tmp.4 = a.1
tmp.5 = tmp.3 - tmp.4

becomes:

tmp.1 = 5  // dead
tmp.2 = 10 // dead
tmp.3 = 15 // the add is processed by the compiler and the constant is emitted instead of an actual add op.
tmp.4 = a.1
tmp.5 = tmp.3 - tmp.4 // this non-constant expression still needs evaluation at run time

then rewrite this during register allocation:

tmp.1 = 15
tmp.2 = a.1
tmp.3 = tmp.1 - tmp.2

We keep a dictionary of renames.  As we copy instructions from the old context to the new context, we consult the
rename dictionary to see if anything needs to change.

---

We need to track the following pieces of information:

1. cpu registers which are free
2. ssa registers that are active
3. ssa registers that have been spilled
4. a map of spilled registers to spill slots

For each ssa assignment we need to:

1. find a free register
2. spill an occupied register if there are no free registers
3. fill one or two ssa registers if both one or both source ssa registers have been spilled
4. spill an additional one or two registers depending on the fill requirements for the instruction

 